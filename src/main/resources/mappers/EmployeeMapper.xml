<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.solvd.persistence.EmployeeDAO">
    <resultMap id="EmployeeResultMap" type="com.solvd.domain.Employee" autoMapping="false">
        <id property="id" column="employee_id"/>
        <result property="cuil" column="employee_cuil"/>
        <result property="firstName" column="employee_first_name"/>
        <result property="lastName" column="employee_last_name"/>
        <result property="address" column="employee_address"/>
        <result property="phone" column="employee_phone"/>
        <result property="email" column="employee_email"/>
        <result property="salary" column="employee_salary"/>
        <collection property="roles" resultMap="EventEmployeeResultMap"/>
        <collection property="events" resultMap="com.solvd.persistence.EventDAO.EventResultMap"/>
    </resultMap>

    <resultMap id="EventEmployeeResultMap" type="com.solvd.domain.EventEmployee" autoMapping="false">
        <id property="id" column="event_employee_id"/>
        <result property="role" column="event_employee_role"/>
        <association property="employee" resultMap="EmployeeResultMap"/>
        <association property="event" resultMap="com.solvd.persistence.EventDAO.EventResultMap"/>
    </resultMap>

    <insert id="save" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
        Insert into employee (cuil, first_name, last_name, address, phone, email, salary)
        values (#{employee.cuil}, #{employee.firstName}, #{employee.lastName}, #{employee.address}, #{employee.phone}, #{employee.email},
        #{employee.salary})
    </insert>

    <sql id="selectEmployee">
        Select
        e.id as employee_id, e.first_name as employee_first_name, e.last_name as employee_last_name, e.address as
        employee_address, e.phone as employee_phone, e.email as employee_email, e.salary as employee_salary,
        ee.id as event_employee_id, ee.role as event_employee_role, ee.employee_id as event_employee_employee_id,
        ee.event_id as event_employee_event_id,
        ev.id as event_id, ev.name as event_name, ev.theme as event_theme, ev.base_ticket_price as
        event_base_ticket_price, ev.start_date as event_start_date, ev.end_date as event_end_date, ev.address as
        event_address, ev.description as event_description
        from employee e
        left join event_employee ee on e.id = ee.employee_id
        left join event ev on ev.id = ee.event_id
    </sql>

    <select id="findAll" resultMap="EmployeeResultMap">
        <include refid="selectEmployee"/>
    </select>

    <select id="findById" resultMap="EmployeeResultMap">
        <include refid="selectEmployee"/>
        where e.id = #{id}
    </select>

    <select id="findManyByColumn" resultMap="EmployeeResultMap">
        <include refid="selectEmployee"/>
        where e.#{key} = #{value}
    </select>

    <select id="findOneByColumn" resultMap="EmployeeResultMap">
        <include refid="selectEmployee"/>
        where e.#{key} = #{value}
    </select>

    <delete id="deleteById">
        Delete from employee where id = #{id}
    </delete>

    <update id="updateById">
        Update employee set
        cuil = #{employee.cuil},
        first_name = #{employee.firstName},
        last_name = #{employee.lastName},
        address = #{employee.address},
        phone = #{employee.phone},
        email = #{employee.email},
        salary = #{employee.salary}
        where id = #{id}
    </update>
</mapper>